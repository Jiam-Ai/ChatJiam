import React, { useState, useMemo } from 'react';
import type { ChatMessage, MessageContent } from '../types';

interface HistoryModalProps {
  isVisible: boolean;
  onClose: () => void;
  messages: ChatMessage[];
  deleteMessage: (messageId: string) => void;
  togglePinMessage: (messageId: string) => void;
  toggleArchiveMessage: (messageId: string) => void;
}

const getMessagePreview = (content: MessageContent): string => {
    if (typeof content === 'string') return content;
    if (content && 'images' in content && Array.isArray(content.images)) return `[Image] Generated by ${content.images.map(i => i.apiName).join(', ')}`;
    if (content && 'lyrics' in content) return `[Lyrics] ${content.title} by ${content.artist}`;
    if (content && 'file' in content) return `[File] ${content.file.name}: ${content.text}`;
    if (content && 'imageUrl' in content) return `[Image Upload] ${content.text}`;
    return '[System Message]';
};

const HistoryModal: React.FC<HistoryModalProps> = ({ isVisible, onClose, messages, deleteMessage, togglePinMessage, toggleArchiveMessage }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const [view, setView] = useState<'active' | 'pinned' | 'archived'>('active');

    const filteredMessages = useMemo(() => {
        const baseMessages = messages.filter(m => m.type !== 'system' && m.type !== 'broadcast');
        const viewFiltered = baseMessages.filter(msg => {
            switch(view) {
                case 'pinned': return msg.isPinned && !msg.isArchived;
                case 'archived': return msg.isArchived;
                default: return !msg.isArchived;
            }
        });
        if (!searchTerm.trim()) return viewFiltered;
        const lowercasedTerm = searchTerm.toLowerCase();
        return viewFiltered.filter(msg => getMessagePreview(msg.content).toLowerCase().includes(lowercasedTerm));
    }, [messages, searchTerm, view]);

    const handleDelete = (messageId: string) => {
        if (window.confirm('Are you sure you want to permanently delete this message?')) {
            deleteMessage(messageId);
        }
    };

    if (!isVisible) return null;

    const filterButtonClasses = "px-4 py-2 text-sm font-semibold rounded-md transition-colors duration-200";
    const activeFilterClasses = "bg-[var(--accent-purple)] text-white";
    const inactiveFilterClasses = "bg-black/20 hover:bg-black/40 text-gray-300";

    return (
        <div className="fixed inset-0 bg-[rgba(2,0,16,0.9)] backdrop-blur-lg flex items-center justify-center z-50 p-2 sm:p-4 animate-fade-in">
            <div className="relative w-full max-w-3xl h-full sm:h-[90vh] bg-[rgba(10,15,31,0.6)] border border-[var(--border-color)] rounded-none sm:rounded-lg p-4 sm:p-6 flex flex-col gap-4 font-body text-white animate-scale-in">
                <button onClick={onClose} className="absolute top-2 right-2 sm:top-4 sm:right-4 w-8 h-8 rounded-full bg-white/10 text-white flex items-center justify-center text-xl font-bold z-10 hover:bg-white/20">&times;</button>
                
                <h2 className="font-title text-xl sm:text-2xl text-[var(--accent-purple)] text-center border-b border-[var(--border-color)] pb-3">Chat History</h2>

                <div className="relative flex-shrink-0">
                    <input
                        type="text"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        placeholder="Search messages..."
                        className="w-full bg-[rgba(0,0,0,0.5)] border border-[var(--border-color)] rounded-md text-white p-3 pl-10 text-base outline-none transition-colors focus:ring-2 focus:ring-[var(--accent-purple)]"
                    />
                    <svg className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                </div>

                <div className="flex items-center justify-center gap-3 flex-shrink-0">
                    <button onClick={() => setView('active')} className={`${filterButtonClasses} ${view === 'active' ? activeFilterClasses : inactiveFilterClasses}`}>Active</button>
                    <button onClick={() => setView('pinned')} className={`${filterButtonClasses} ${view === 'pinned' ? activeFilterClasses : inactiveFilterClasses}`}>Pinned</button>
                    <button onClick={() => setView('archived')} className={`${filterButtonClasses} ${view === 'archived' ? activeFilterClasses : inactiveFilterClasses}`}>Archived</button>
                </div>
                
                <div className="flex-grow overflow-y-auto pr-2 space-y-3 min-h-0">
                    {filteredMessages.length > 0 ? (
                        [...filteredMessages].sort((a, b) => b.timestamp - a.timestamp).map(msg => (
                            <div key={msg.id} className="p-3 bg-black/20 rounded-lg flex justify-between items-start gap-3 hover:bg-black/40 transition-colors animate-fade-in">
                                <div className="flex-grow min-w-0">
                                    <div className="flex items-center gap-2 mb-1 flex-wrap">
                                        <span className={`font-semibold text-sm ${msg.sender === 'user' ? 'text-purple-400' : 'text-gray-300'}`}>
                                            {msg.sender === 'user' ? 'You' : 'Jiam'}
                                        </span>
                                        {msg.isPinned && view === 'active' && ( <svg className="w-3.5 h-3.5 text-yellow-400" fill="currentColor" viewBox="0 0 16 16"><path d="M16 12V4H8v8l-4 4v2h16v-2l-4-4z"/></svg> )}
                                        <span className="text-xs text-gray-500">{new Date(msg.timestamp).toLocaleString()}</span>
                                    </div>
                                    <p className="text-sm text-gray-200 whitespace-pre-wrap break-words">{getMessagePreview(msg.content)}</p>
                                </div>
                                <div className="flex-shrink-0 flex items-center gap-1">
                                    <button onClick={() => togglePinMessage(msg.id)} title={msg.isPinned ? "Unpin" : "Pin"} className={`w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 ${msg.isPinned ? 'bg-yellow-500/20 text-yellow-400 hover:bg-yellow-500 hover:text-white' : 'text-gray-400 hover:bg-white/10 hover:text-white'}`}>
                                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 16 16"><path d="M16 12V4H8v8l-4 4v2h16v-2l-4-4z"/></svg>
                                    </button>
                                    <button onClick={() => toggleArchiveMessage(msg.id)} title={msg.isArchived ? "Unarchive" : "Archive"} className="w-8 h-8 rounded-full text-gray-400 flex items-center justify-center transition-all duration-200 hover:bg-white/10 hover:text-white">
                                        {msg.isArchived ? <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" /></svg> : <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>}
                                    </button>
                                    <button onClick={() => handleDelete(msg.id)} title="Delete Message" className="w-8 h-8 rounded-full text-red-400 flex items-center justify-center transition-all duration-200 hover:bg-red-500 hover:text-white">
                                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clipRule="evenodd"></path></svg>
                                    </button>
                                </div>
                            </div>
                        ))
                    ) : (
                        <div className="flex items-center justify-center h-full text-center text-gray-500">
                            <p>{searchTerm ? 'No messages found.' : `No ${view} messages.`}</p>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default HistoryModal;